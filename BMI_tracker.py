import streamlit as st
import pandas as pd
import io
import plotly.express as px

st.set_page_config(page_title='BMI Tracker', layout="centered", initial_sidebar_state="expanded")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ò–ú–¢
def get_bmi_category(bmi):
    if bmi < 18.5:
        return "Untergewicht"
    elif 18.5 <= bmi < 25:
        return "Normalgewicht"
    elif 25 <= bmi < 30:
        return "√úbergewicht"
    else:
        return "Fettleibigkeit" 


if "data" not in st.session_state:
    st.session_state.data = pd.DataFrame({
        "Name": ["Alice", "Bob", "Clara"],
        "Height (cm)": [172.5, 165.0, 180.3],
        "Weight (kg)": [60.0, 70.0, 55.5] # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –≤–µ—Å–∞
    })   
        
# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º BMI –¥–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    # BMI = –≤–µ—Å (–∫–≥) / (—Ä–æ—Å—Ç (–º) * —Ä–æ—Å—Ç (–º))
    st.session_state.data["BMI"] = st.session_state.data.apply(
        lambda row: round(row["Weight (kg)"] / ((row["Height (cm)"] / 100)**2), 1) if row["Height (cm)"] > 0 else 0, axis=1
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ò–ú–¢
    st.session_state.data["BMI Status"] = st.session_state.data["BMI"].apply(get_bmi_category)


st.title("üìè BMI Tracker")    

with st.sidebar:
    st.header("Add a new person")
    name = st.text_input("Name", key="name_input")
    height = st.number_input("Height (cm)", min_value=0.0, step=0.1, key="height_input")
    weight = st.number_input("Weight (kg)", min_value=0.0, step=0.1, key="weight_input") 
    
    if st.button("Save"):
        if name and height and weight: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç—Ä–∏ –ø–æ–ª—è
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º BMI –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
            bmi = round(weight / ((height / 100)**2), 1) if height > 0 else 0
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ò–ú–¢
            bmi_status = get_bmi_category(bmi)

            new_data_row = pd.DataFrame({
                "Name": [name],
                "Height (cm)": [height],
                "Weight (kg)": [weight], # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å
                "BMI": [bmi], # –î–æ–±–∞–≤–ª—è–µ–º BMI
                "BMI Status": [bmi_status] # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ò–ú–¢
            })

            st.session_state.data = pd.concat(
                [st.session_state.data, new_data_row], # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é st.session_state.data
                ignore_index=True,
            )
            st.toast(f"Gespeichert: {name} - {height:.1f} cm, {weight:.1f} kg, BMI: {bmi:.1f} ({bmi_status})", icon="‚úÖ")
        else:
            st.toast("Bitte Name, Gr√∂√üe und Gewicht eingeben!", icon="‚ö†Ô∏è") # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ


    st.markdown("---")
    st.header("Datenoptionen")  


    uploaded_file = st.file_uploader("CSV-Datei hochladen", type="csv")
    if uploaded_file is not None:
       try:
           df_upload = pd.read_csv(uploaded_file)
           # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ—Ö –±–∞–∑–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
           required_cols = {"Name", "Height (cm)", "Weight (kg)"}
           if required_cols.issubset(df_upload.columns):
                # –ï—Å–ª–∏ BMI –Ω–µ—Ç –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ, —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –µ–≥–æ
                if "BMI" not in df_upload.columns:
                   df_upload["BMI"] = df_upload.apply(
                       lambda row: round(row["Weight (kg)"] / ((row["Height (cm)"] / 100)**2), 1) if row["Height (cm)"] > 0 else 0, axis=1
                   )
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ò–ú–¢, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if "BMI Status" not in df_upload.columns:
                    df_upload["BMI Status"] = df_upload["BMI"].apply(get_bmi_category)
   
                st.session_state.data = df_upload
                st.toast("Datei erfolgreich geladen!", icon="üìÑ")
           else:
               st.warning(f"Die Datei muss die Spalten {', '.join(required_cols)} enthalten.") # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
       except Exception as e:
           st.error(f"Fehler beim Laden der Datei: {e}")


    if st.button("üóëÔ∏è Datensatz leeren"):
           # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –∏ –≤–µ—Å, –∏ BMI
           st.session_state.data = pd.DataFrame({"Name": [], "Height (cm)": [], "Weight (kg)": [], "BMI": [], "BMI Status": []})
           st.toast("Daten wurden zur√ºckgesetzt.", icon="üóëÔ∏è")

    st.download_button(
        label="üì• CSV herunterladen",
        data=st.session_state.data.to_csv(index=False).encode("utf-8"),
        file_name="BMI_data.csv", # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        mime="text/csv"
)          


st.subheader("Datensatz (bearbeitbar)")
# –¢–µ–ø–µ—Ä—å —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫, –≤–∫–ª—é—á–∞—è BMI
edited_df = st.data_editor(
    st.session_state.data,
    num_rows="dynamic",
    use_container_width=True,
    key="data_editor",
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å BMI –Ω–µ—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º, –µ—Å–ª–∏ –æ–Ω –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º
    column_config={
        "BMI": st.column_config.NumberColumn("BMI", help="Body-Mass-Index", format="%.1f", disabled=True),
        "BMI Status": st.column_config.TextColumn("BMI Status", help="Body-Mass-Index-Kategorie", disabled=True),
        "Weight (kg)": st.column_config.NumberColumn("Weight (kg)", help="Gewicht in Kilogramm", format="%.1f kg"),
        "Height (cm)": st.column_config.NumberColumn("Height (cm)", help="Wachstum in Zentimetern", format="%.1f cm")
    }
) 

# –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º BMI, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ä–æ—Å—Ç –∏–ª–∏ –≤–µ—Å –≤ —Ç–∞–±–ª–∏—Ü–µ
# —Ç–∞–∫ –∫–∞–∫ BMI –¥–æ–ª–∂–µ–Ω –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –¥—Ä—É–≥–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
if not edited_df.equals(st.session_state.data): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –∫–æ–ø–∏–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å SettingWithCopyWarning
    temp_df = edited_df.copy()
    temp_df["BMI"] = temp_df.apply(
        lambda row: round(row["Weight (kg)"] / ((row["Height (cm)"] / 100)**2), 1) if row["Height (cm)"] > 0 else 0, axis=1
    )
    temp_df["BMI Status"] = temp_df["BMI"].apply(get_bmi_category)
    st.session_state.data = temp_df
    st.toast("Daten aktualisiert, BMI und Status neu berechnet!", icon="üîÑ")


# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ data_editor
current_data = st.session_state.data

if not current_data.empty:
    max_height = current_data["Height (cm)"].max()
    min_height = current_data["Height (cm)"].min()
    avg_height = current_data["Height (cm)"].mean()

    max_weight = current_data["Weight (kg)"].max() # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å
    min_weight = current_data["Weight (kg)"].min() # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å
    avg_weight = current_data["Weight (kg)"].mean() # –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å

    max_bmi = current_data["BMI"].max() # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π BMI
    min_bmi = current_data["BMI"].min() # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π BMI
    avg_bmi = current_data["BMI"].mean() # –°—Ä–µ–¥–Ω–∏–π BMI


    tallest_name = current_data.loc[current_data["Height (cm)"] == max_height, "Name"].values[0]
    shortest_name = current_data.loc[current_data["Height (cm)"] == min_height, "Name"].values[0]

    # –ò–º–µ–Ω–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ/–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–µ—Å–∞ –∏ BMI
    heaviest_name = current_data.loc[current_data["Weight (kg)"] == max_weight, "Name"].values[0]
    lightest_name = current_data.loc[current_data["Weight (kg)"] == min_weight, "Name"].values[0]

    highest_bmi_name = current_data.loc[current_data["BMI"] == max_bmi, "Name"].values[0]
    lowest_bmi_name = current_data.loc[current_data["BMI"] == min_bmi, "Name"].values[0]

    st.divider()
    st.subheader("Kennzahlen")
    # –¢—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ —Ä–æ—Å—Ç–∞, –≤–µ—Å–∞ –∏ BMI
    col_h1, col_h2, col_h3 = st.columns(3)
    col_w1, col_w2, col_w3 = st.columns(3)
    col_b1, col_b2, col_b3 = st.columns(3)

    # –ú–µ—Ç—Ä–∏–∫–∏ —Ä–æ—Å—Ç–∞ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
    col_h1.metric("Gr√∂√üte Gr√∂√üe", f"{max_height:.1f} cm", f"von {tallest_name}")
    col_h2.metric("Kleinste Gr√∂√üe", f"{min_height:.1f} cm", f"von {shortest_name}")
    col_h3.metric("Durchschnitt (Gr√∂√üe)", f"{avg_height:.1f} cm") # –ò–∑–º–µ–Ω—è–µ–º, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ —ç—Ç–æ —Å—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç

    st.markdown("---") # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏

    # –ú–µ—Ç—Ä–∏–∫–∏ –≤–µ—Å–∞
    col_w1.metric("H√∂chstes Gewicht", f"{max_weight:.1f} kg", f"von {heaviest_name}")
    col_w2.metric("Niedrigstes Gewicht", f"{min_weight:.1f} kg", f"von {lightest_name}")
    col_w3.metric("Durchschnitt (Gewicht)", f"{avg_weight:.1f} kg")

    st.markdown("---") # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏

    # –ú–µ—Ç—Ä–∏–∫–∏ BMI
    col_b1.metric("H√∂chster BMI", f"{max_bmi:.1f}", f"von {highest_bmi_name}")
    col_b2.metric("Niedrigster BMI", f"{min_bmi:.1f}", f"von {lowest_bmi_name}")
    col_b3.metric("Durchschnitt (BMI)", f"{avg_bmi:.1f}") 

    st.divider()
    st.subheader("BMI-Verteilung")
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Altair
    bmi_distribution_df = current_data["BMI Status"].value_counts().reset_index()
    bmi_distribution_df.columns = ["BMI Status", "Count"]

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Plotly
    bmi_distribution_df = current_data["BMI Status"].value_counts().reset_index()
    bmi_distribution_df.columns = ["BMI Status", "Count"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ü–≤–µ—Ç–∞
    category_order = ["Untergewicht", "Normalgewicht", "√úbergewicht", "Fettleibigkeit"]
    color_map = {
        "Untergewicht": "blue",
        "Normalgewicht": "green",
        "√úbergewicht": "yellow",
        "Fettleibigkeit": "red"
    }

    # –°–æ–∑–¥–∞–µ–º Plotly –¥–∏–∞–≥—Ä–∞–º–º—É
    fig = px.bar(
        bmi_distribution_df,
        x="BMI Status",
        y="Count",
        title="Verteilung des BMI nach Kategorien",
        color="BMI Status", # –£–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ä–∞—Å–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è
        color_discrete_map=color_map, # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—à—É –∫–∞—Ä—Ç—É —Ü–≤–µ—Ç–æ–≤
        category_orders={"BMI Status": category_order} # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫–µ—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    fig.update_layout(xaxis_title="BMI Status", yaxis_title="Anzahl der Personen")
    
    st.plotly_chart(fig, use_container_width=True) # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É Plotly
else:
    st.info("F√ºge Daten hinzu, um Kennzahlen zu sehen.")
   