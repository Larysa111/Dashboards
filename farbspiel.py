import streamlit as st
from random import randint
import time

st.title("Farbspiel")

if "score" not in st.session_state:
    st.session_state["score"] = 0

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—á–∫–æ–≤
st.sidebar.header("–û—á–∫–∏")
st.sidebar.write(f"–£–≥–∞–¥–∞–Ω–æ —Ü–≤–µ—Ç–æ–≤: {st.session_state.score}")

def create_new_goal():
    st.session_state.goal_r = randint(0,255)
    st.session_state.goal_g = randint(0,255)
    st.session_state.goal_b = randint(0,255)
    st.session_state.r_value = 0 # –°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–æ–≤–æ–π –∏–≥—Ä–µ
    st.session_state.g_value = 0
    st.session_state.b_value = 0
    st.session_state.r_slider = 0
    st.session_state.g_slider = 0
    st.session_state.b_slider = 0
    st.session_state.hint_used = False # –°–±—Ä–æ—Å –ø–æ–¥—Å–∫–∞–∑–∫–∏
    st.session_state.start_time = time.time() # –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
if "goal_r" not in st.session_state:
    st.session_state.score = 0
    st.session_state.hint_used = False # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
    st.session_state.start_time = time.time() # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞
    create_new_goal()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
TIME_LIMIT_SECONDS = 60   


if "goal_r" not in st.session_state:
    create_new_goal()

cols_colors = st.columns([1,2,1])

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–ª–∞–π–¥–µ—Ä–æ–≤ –∏ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
def update_slider_r():
    st.session_state.r_slider = st.session_state.r_value

def update_number_r():
    st.session_state.r_value = st.session_state.r_slider


def update_slider_g():
    st.session_state.g_slider = st.session_state.g_value 

def update_number_g():
    st.session_state.g_value = st.session_state.g_slider  


def update_slider_b():
    st.session_state.b_slider = st.session_state.b_value 

def update_number_b():
    st.session_state.b_value = st.session_state.b_slider             


with cols_colors[1]:
    col1, col2 = st.columns(2)
    col1.slider("üî¥", 0, 255, key="r_slider", on_change=update_number_r)
    col2.number_input(" ", 0, 255, key="r_value", on_change=update_slider_r)
    col1, col2 = st.columns(2)
    col1.slider("üü¢", 0, 255, key="g_slider", on_change=update_number_g)
    col2.number_input(" ", 0, 255, key="g_value", on_change=update_slider_g)
    col1, col2 = st.columns(2)
    col1.slider("üîµ", 0, 255, key="b_slider", on_change=update_number_b)
    col2.number_input(" ", 0, 255, key="b_value", on_change=update_slider_b)

def circle_div(r, g, b):
    return f""" 
        <div style='
            width: 150px;
            height: 150px;
            background-color : rgb({r}, {g}, {b});
            border-radius: 50%;
            margin-top: 20px;
            margin-left: auto;
            margin-right: auto;
        '>
        </div>
        """

with cols_colors[0]:
    st.header("You")
    st.markdown(
        circle_div(st.session_state.r_value, st.session_state.g_value, st.session_state.b_value),
        unsafe_allow_html=True
    )
with cols_colors[2]:
    st.header("Ziel")
    st.markdown(
        circle_div(st.session_state.goal_r, st.session_state.goal_g, st.session_state.goal_b),
        unsafe_allow_html=True
    ) 


def distance(r1, g1, b1, r2, g2, b2)   :
    return max(0, 100 - abs(r1-r2) - abs(g1-g2) - abs(b1-b2))

d = distance(st.session_state.r_value, st.session_state.g_value, st.session_state.b_value, st.session_state.goal_r, st.session_state.goal_g, st.session_state.goal_b)
progress_bar = st.progress(d)   


# –õ–æ–≥–∏–∫–∞ —Ç–∞–π–º–µ—Ä–∞
elapsed_time = time.time() - st.session_state.start_time
remaining_time = max(0, TIME_LIMIT_SECONDS - int(elapsed_time))

timer_placeholder = st.empty()
timer_placeholder.metric("–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏", f"{remaining_time} —Å–µ–∫")

game_over = False
if remaining_time <= 0 and d < 100:
    st.error("–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    game_over = True
elif d == 100:
    if not game_over: # –ß—Ç–æ–±—ã –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –æ—á–∫–∏, –µ—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ —Ç–∞–π–º–µ—Ä—É
        st.balloons()
        st.success("Gewonnen üéâ")
        if not st.session_state.hint_used: # –û—á–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å
            st.session_state.score += 1
        game_over = True # –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—á–∫–æ–≤
st.sidebar.header("–û—á–∫–∏")
st.sidebar.write(f"–£–≥–∞–¥–∞–Ω–æ —Ü–≤–µ—Ç–æ–≤: {st.session_state.score}")

# –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ"
def Show_solution():
    st.session_state.r_value = st.session_state.goal_r
    st.session_state.g_value = st.session_state.goal_g
    st.session_state.b_value = st.session_state.goal_b
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä—ã, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —á–∏—Å–ª–æ–≤—ã–º –ø–æ–ª—è–º
    update_slider_r()
    update_slider_g()
    update_slider_b()
    st.session_state.hint_used = True # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞
    st.info(f"–¶–µ–ª–µ–≤–æ–π —Ü–≤–µ—Ç: R:{st.session_state.goal_r}, G:{st.session_state.goal_g}, B:{st.session_state.goal_b}")


# –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Å–∫–∞–∑–∫–∞"
# –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π, –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞
if st.button("–ü–æ–¥—Å–∫–∞–∑–∫–∞", on_click=Show_solution, disabled=game_over or st.session_state.hint_used):
    pass # –î–µ–π—Å—Ç–≤–∏–µ —É–∂–µ –≤ on_click

# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
st.button("–ù–æ–≤–∞—è –∏–≥—Ä–∞", on_click=create_new_goal)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ (–µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)
if not game_over and remaining_time > 0:
    time.sleep(1) # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
    st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞



